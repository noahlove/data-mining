[["index.html", "Data Mining Chapter 1 A Brief Introduction", " Data Mining Noah Love 2021-03-05 Chapter 1 A Brief Introduction "],["a-caucus-race-and-a-long-tale.html", "Chapter 2 A caucus-race and a long tale", " Chapter 2 A caucus-race and a long tale "],["principal-component-analysis.html", "Chapter 3 Principal Component Analysis 3.1 Principle Component Analysis 3.2 Typical machine learning approach 3.3 What we would do in data mining", " Chapter 3 Principal Component Analysis Sparcity: Inbalanced data: 3.1 Principle Component Analysis hidden_p &lt;- 5 observ_p &lt;- 30 prob &lt;- NULL # runif(hidden_p) h2o &lt;- sample(hidden_p, #hidden to observed observ_p, replace=TRUE, prob=prob) h2o &lt;- sort(h2o) sample_size &lt;- 1000 hidden_z &lt;- sapply( seq_len(hidden_p), function(x) rnorm(sample_size)) corrs &lt;- runif(observ_p, 0.3, 0.8) #create five groups of colinear stuff observ_x &lt;- mapply( function(i, corr) { hidden_z[, i] * corr + rnorm(sample_size) * (1 - corr) *100 }, h2o, corrs) #observ_x is what you often see, but there is still hidden stuff image(cor(observ_x)) #This looks weird to what we expect. It doesn&#39;t look like five groups #if we sort instead it works h2o &lt;- sample(hidden_p, #hidden to observed observ_p, replace=TRUE, prob=prob) sample_size &lt;- 1000 hidden_z &lt;- sapply( seq_len(hidden_p), function(x) rnorm(sample_size)) #This effects how things are correlated! corrs &lt;- runif(observ_p, 0.3, 0.8) #create five groups of colinear stuff observ_x &lt;- mapply( function(i, corr) { hidden_z[, i] * corr + rnorm(sample_size) * (1 - corr) }, h2o, corrs) #observ_x is what you often see, but there is still hidden stuff image(cor(observ_x)) beta &lt;- runif(hidden_p, -10, 10) noise &lt;- rnorm(sample_size, sd=10) #hard to measure hidden forces! #we can only measure x, but x is only correlated to hidden stuff y &lt;- hidden_z %*% beta + noise df &lt;- data.frame(y, observ_x) #y depends on the hidden stuff not x Maybe there is a hidden gene inside of you that makes you sick. We can’t (yet) measure that hidden gene. But we can measure symptoms and things like your heart rate. This should be correlated. 3.2 Typical machine learning approach #training data set, first 800 points (80 percent) train &lt;- 1:800 ols &lt;- lm(y ~ ., df, subset=train) length(ols$residual) #correct length ## [1] 800 #predict on points we didn&#39;t use to train ols_pred &lt;- predict(ols, df[-train,]) #error: differrence between measured values against predict. Mean of this squared MSE! mean((df$y[-train] - ols_pred)^2) ## [1] 146.1034 #run ols #PCA TIME #only input X, (feature matrix) into the PCA function pr_out &lt;- prcomp(observ_x, scale=FALSE) #scale is used because Xs might not be in the same unit, so mean = 0, sd = 1 class(pr_out) ## [1] &quot;prcomp&quot; #it has its own class names(pr_out) ## [1] &quot;sdev&quot; &quot;rotation&quot; &quot;center&quot; ## [4] &quot;scale&quot; &quot;x&quot; #squared value of sdev is eigenvalue eigen_val &lt;- pr_out$sdev^2 #cumulative sum as a fraction of total eigenvalues plot(cumsum(eigen_val) / sum(eigen_val)) abline(h=.9) #here after the 5th point, the slope tapers off! This is directly related to the hidden_p value at the beginning. It should help show you how many important hidden features there are. #it is the percent of variabilitiy caputured by the first k components #If you don&#39;t know what to choose, 90% variability is a good point plot(pr_out$sdev) #Very similar, but not as interpretable as percent of variability. #These steps is how k is chosen. #K is the dimension of W. Data came n x p. We need to shrink it to k. If you don&#39;t have #a clear cut, use 90% #we don&#39;t want to keep all the variability because not all features provide useful #information. Some of them are so colinear, they just add noise. cutoff &lt;- 5 #now we are looking at x #only pull out first k columns dim(pr_out$x) ## [1] 1000 30 dim(observ_x) ## [1] 1000 30 #these will be the same, but we choose a cutoff. W &lt;- pr_out$x[, 1:cutoff] df_w &lt;- data.frame(y, W) #PCA doesn&#39;t have to be lm. It could be ridge or lasso too #should be like the ols from above pca &lt;- lm(y ~ ., df_w, subset=train) #same prediction pca_pred &lt;- predict(pca, df_w[-train,]) #prediction error mean((df_w$y[-train] - pca_pred)^2) ## [1] 145.369 #that was the classic view of PCA 3.3 What we would do in data mining k &lt;- 3 plot(pr_out$rotation[,k]) abline(h = 0) which(abs(pr_out$rotation[, k]) &gt; 0.2) ## [1] 4 10 11 20 21 25 26 #what is the truth we should be comparing to? pr_out &lt;- prcomp(observ_x) test_x &lt;- scale(observ_x, scale = FALSE) %*% pr_out$rotation pr_out$x ## PC1 PC2 ## [1,] 0.2480232826 0.7733639685 ## [2,] -3.9701360522 3.6217005643 ## [3,] -0.4031730397 -0.4363819015 ## [4,] -1.3430636969 1.3350663538 ## [5,] -0.0751410769 -2.5497373635 ## [6,] -2.0593907857 1.7915893487 ## [7,] 4.2401982548 -2.0584323853 ## [8,] -2.7778910524 -1.1023892680 ## [9,] -0.2899934936 -0.0327354055 ## [10,] 3.2264615696 0.4924734162 ## [11,] -0.1125747740 -1.8804771017 ## [12,] -0.7280494994 -0.1737334539 ## [13,] -0.5058532231 -2.5438876051 ## [14,] 1.1939493362 -0.4154227679 ## [15,] -1.2346652484 1.5414762410 ## [16,] -3.5124878227 0.2192334281 ## [17,] 1.9043911367 1.0031000572 ## [18,] 2.2772258625 1.2390386740 ## [19,] 2.8862246720 1.2365287595 ## [20,] -2.6326638512 0.3297612733 ## [21,] -1.0384173236 -1.2808439905 ## [22,] 0.1962708797 -0.9694417267 ## [23,] -0.2603573856 -2.3292924960 ## [24,] -0.5473139756 -1.9646324241 ## [25,] -3.8493414764 -1.6954893523 ## [26,] -2.1658663137 -1.7605683454 ## [27,] 2.8179785763 0.3102838776 ## [28,] 0.6347391117 -1.1019066936 ## [29,] -1.6543527116 0.1248042939 ## [30,] -0.5403948061 -4.5086857410 ## [31,] 4.4371847529 0.8690812494 ## [32,] 0.5509486914 -1.3394982860 ## [33,] -0.4616306714 1.4874885814 ## PC3 PC4 ## [1,] 1.926982100 -1.594599e+00 ## [2,] -1.355906342 -1.340348e+00 ## [3,] -0.283371628 -2.779478e-01 ## [4,] -2.425471525 5.154943e-01 ## [5,] -0.712204169 -1.945871e+00 ## [6,] -0.884788169 1.365068e+00 ## [7,] -1.293804941 -9.098646e-01 ## [8,] -1.574037555 -1.056409e+00 ## [9,] -1.578208899 -1.322633e-01 ## [10,] -1.193281340 -1.520090e+00 ## [11,] 0.692026504 2.336492e-02 ## [12,] 0.431922230 -1.053189e+00 ## [13,] -0.535652063 -4.335647e-01 ## [14,] -0.480673042 9.189296e-02 ## [15,] -1.808263276 7.808746e-02 ## [16,] 0.214681179 -1.390124e+00 ## [17,] 1.677142417 1.545156e+00 ## [18,] 0.281275898 3.505345e+00 ## [19,] 1.596108827 -5.903157e-01 ## [20,] -2.003078568 -2.010992e+00 ## [21,] 0.403183718 -1.826349e+00 ## [22,] -0.755069901 -1.587339e-01 ## [23,] 1.621993729 9.099381e-01 ## [24,] -0.668527034 -7.724945e-01 ## [25,] -0.246392588 -6.440515e-01 ## [26,] 2.451181233 -1.689658e+00 ## [27,] -0.471860913 4.307343e-01 ## [28,] 0.848786286 -4.911101e-01 ## [29,] 1.340417780 -1.368368e-01 ## [30,] -2.542877260 -6.715461e-01 ## [31,] -1.358864103 -2.555125e+00 ## [32,] -1.034418818 -1.502652e-01 ## [33,] 1.459768511 1.630333e-05 ## PC5 PC6 ## [1,] -0.324852116 -0.2984255135 ## [2,] -2.327856890 -0.8162330524 ## [3,] -0.300730920 -0.4252828662 ## [4,] -0.759603185 -0.5509993041 ## [5,] -0.370385292 0.1944391395 ## [6,] -0.414824094 0.9917801820 ## [7,] 0.118082634 -0.1879327021 ## [8,] 1.171563400 0.3900047159 ## [9,] -0.276329068 -0.3104981557 ## [10,] -0.167630416 0.6634958953 ## [11,] 1.026325536 -0.2522689266 ## [12,] 1.948661440 -0.4179137676 ## [13,] -0.361309154 -0.8776666789 ## [14,] 0.017140075 0.6165565259 ## [15,] -0.560715347 0.4980505852 ## [16,] -0.862537432 0.9075090636 ## [17,] 0.004903854 0.6668924792 ## [18,] -0.515625324 0.7824984404 ## [19,] -0.021265644 0.9559734401 ## [20,] 0.164180136 -0.3184040345 ## [21,] 1.097570077 0.4475328676 ## [22,] 0.437659530 0.0933922865 ## [23,] -0.692468534 -0.2882695211 ## [24,] -1.547658021 -0.0476512608 ## [25,] -0.293061463 0.6896665950 ## [26,] 0.610821042 0.7071905694 ## [27,] -1.011006058 0.3212056179 ## [28,] 0.894191138 0.0507682254 ## [29,] -0.022221348 -1.1652875370 ## [30,] -0.407880537 0.5808342725 ## [31,] -0.747629875 0.0968308063 ## [32,] -1.825604069 0.0794347736 ## [33,] 0.020225077 -0.7479619637 ## PC7 PC8 ## [1,] -3.278501e-02 -0.7325846390 ## [2,] -5.453093e-01 -0.5960063107 ## [3,] 7.981726e-01 -1.2272136862 ## [4,] -3.733913e-01 0.4785416239 ## [5,] 8.929629e-01 0.2004821198 ## [6,] -2.248136e-01 -0.3782130235 ## [7,] -8.206475e-01 -0.2602550708 ## [8,] 1.046319e-01 0.8879310916 ## [9,] -5.555211e-02 -0.1065728248 ## [10,] 8.233280e-01 0.0423529002 ## [11,] 2.038297e-01 -0.2961637202 ## [12,] -4.606946e-01 0.5657566137 ## [13,] -5.508777e-01 -0.1426919052 ## [14,] -1.669105e-01 0.1239227040 ## [15,] -2.759418e-02 -0.4027966663 ## [16,] -7.675353e-01 -0.2305655313 ## [17,] 3.981275e-01 0.7788118300 ## [18,] 4.946239e-01 0.2480513791 ## [19,] 2.876421e-01 0.2873282684 ## [20,] -1.640634e-01 -1.2453049523 ## [21,] -1.153275e+00 -0.8417707807 ## [22,] -1.427422e-01 -0.1027502898 ## [23,] -1.845224e-01 0.5247607810 ## [24,] 6.671230e-01 0.0860311030 ## [25,] 1.839512e-02 -0.0439750774 ## [26,] 1.531092e-02 0.2139696491 ## [27,] -6.942834e-01 0.4852629640 ## [28,] 2.775088e-01 1.0472038654 ## [29,] 8.783422e-01 0.0478303052 ## [30,] 3.413171e-01 -0.0638164837 ## [31,] 8.853070e-01 -0.4591319811 ## [32,] -2.226603e-01 0.4169439231 ## [33,] 1.088749e+00 -0.1544916882 ## PC9 PC10 ## [1,] 0.6141900278 0.118993125 ## [2,] -0.2993586079 0.544258385 ## [3,] -0.5071244671 0.426392198 ## [4,] 0.8813158034 2.012952792 ## [5,] -0.9728247589 -0.714513028 ## [6,] -0.4638085389 0.538756707 ## [7,] -0.8447246659 0.422296937 ## [8,] -0.8653836719 -0.003661541 ## [9,] -0.2688802872 0.467537213 ## [10,] 0.7319057050 -0.349764665 ## [11,] 1.4592423572 1.316474971 ## [12,] 0.4067053925 0.197064014 ## [13,] 0.6715054685 -0.394666190 ## [14,] 0.3222199243 -0.708451086 ## [15,] -0.3683286008 -0.017671823 ## [16,] -0.2828018185 0.634594956 ## [17,] 0.1705988339 0.123630394 ## [18,] 0.5194880332 0.778558848 ## [19,] 0.1084584884 0.078382333 ## [20,] -0.2964045407 0.324693886 ## [21,] -0.0364345609 1.276796477 ## [22,] -0.0444032087 -0.816613408 ## [23,] 0.4698479672 -0.350351837 ## [24,] 0.3391700790 -0.212765035 ## [25,] -0.2184408264 -0.626075408 ## [26,] 1.3412575263 0.741257697 ## [27,] -0.1140942662 0.372361791 ## [28,] -0.7670868078 -0.034868626 ## [29,] 0.3459551740 0.035042460 ## [30,] -0.5041651789 -0.535318871 ## [31,] -0.4282511839 -1.150588448 ## [32,] -0.4667278149 -1.055908047 ## [33,] -0.3953829140 0.511474378 ## PC11 PC12 ## [1,] -1.0384331209 0.4706837112 ## [2,] -0.8411085369 0.9135254107 ## [3,] -0.0271104908 -0.5816053779 ## [4,] 0.8791645969 -0.1923849234 ## [5,] 0.2987656221 -0.6915756799 ## [6,] 0.4953001685 0.6494459418 ## [7,] 0.6773061791 0.3617697234 ## [8,] -0.9315282472 -0.3190986888 ## [9,] -0.3675103235 -0.0593165859 ## [10,] 0.6732078876 1.1704715683 ## [11,] -0.7390168559 0.3027807429 ## [12,] -0.7728353730 0.4501122113 ## [13,] -0.1670919484 -0.1821922555 ## [14,] -0.6340767938 0.2456639886 ## [15,] -0.3085821393 -0.0340826667 ## [16,] -0.6590876010 0.6054611908 ## [17,] -0.0199776149 0.2947214994 ## [18,] -0.3500019029 0.0563050427 ## [19,] 0.3610992809 0.4406060777 ## [20,] -0.2342792846 -0.2230122052 ## [21,] -0.7266497124 0.3912341773 ## [22,] -0.7736498867 0.0599507020 ## [23,] 0.7390384091 -0.1034539405 ## [24,] -0.3932717776 0.0114724175 ## [25,] 1.0189501179 -0.0991664596 ## [26,] 0.6394819506 -0.5567349359 ## [27,] -0.1294449334 0.0696781033 ## [28,] 0.4465484450 -0.3430953041 ## [29,] -0.0917813201 0.2254185608 ## [30,] -0.4680570066 0.1800733500 ## [31,] 0.2361141410 0.1490230164 ## [32,] -0.5360400337 -0.6061836923 ## [33,] -0.7933144204 -0.4058323259 ## PC13 PC14 ## [1,] -0.2484223327 -1.210171e-01 ## [2,] 0.0152444396 1.681738e-01 ## [3,] 0.0407763320 3.199105e-01 ## [4,] -0.4462542150 -1.222064e-01 ## [5,] -0.0980195268 -8.518284e-01 ## [6,] 0.0266363919 4.551266e-02 ## [7,] 0.5247881456 4.701304e-01 ## [8,] -0.5529487540 -5.254865e-01 ## [9,] 0.0493304871 5.513523e-01 ## [10,] -0.7457758423 5.710877e-01 ## [11,] -0.4671769472 2.702579e-01 ## [12,] -1.3998051347 1.063927e+00 ## [13,] 0.0694180136 -6.241110e-01 ## [14,] -0.2339437184 -5.762917e-02 ## [15,] 0.0374374086 3.623520e-01 ## [16,] 0.4541552808 -6.522209e-01 ## [17,] -0.7245533859 -2.975602e-01 ## [18,] -0.6157715758 4.041835e-01 ## [19,] -0.4557144758 3.796990e-01 ## [20,] -0.0370843668 -4.936346e-01 ## [21,] 0.4391707532 6.805421e-01 ## [22,] -0.4879330842 5.640715e-02 ## [23,] 1.2620406162 -1.647739e-01 ## [24,] -0.5953826015 1.343973e+00 ## [25,] 0.3677751395 1.575090e-01 ## [26,] 0.0497355514 4.280568e-01 ## [27,] 0.8225917262 1.789398e-01 ## [28,] -0.3232630263 -1.988396e-01 ## [29,] 0.5908730372 2.161288e-01 ## [30,] 0.2738354993 2.220279e-01 ## [31,] -0.4076405490 -6.498516e-01 ## [32,] 0.1643297159 -2.091050e-01 ## [33,] 0.4265010640 3.375283e-01 ## PC15 PC16 ## [1,] -0.2005437097 0.6239393597 ## [2,] 0.8619618178 -0.3719208157 ## [3,] -0.6819342003 -0.4074758241 ## [4,] 0.3079638708 0.1755269765 ## [5,] -0.9410665696 -0.3737201713 ## [6,] 0.1202976244 0.4945848609 ## [7,] -0.2250691676 0.1325598108 ## [8,] 0.3326232041 -0.1880120462 ## [9,] 0.1447771472 -0.0576696362 ## [10,] 0.1346639121 -0.6409085283 ## [11,] 0.4354887013 0.4032911956 ## [12,] -0.2929689905 -0.6871727411 ## [13,] -0.7778168811 0.3863787674 ## [14,] -0.4676187769 -0.0004747099 ## [15,] 0.5115881657 0.1142327128 ## [16,] 0.0615578038 0.0852009625 ## [17,] -0.3407334502 0.2282585395 ## [18,] -0.0889263298 0.6472294490 ## [19,] 0.1345841051 -0.4640691229 ## [20,] -0.2854302492 0.7849773624 ## [21,] -0.2532371027 -0.3849756419 ## [22,] -0.8460887844 -0.0438349273 ## [23,] 0.4197444245 -0.3043296791 ## [24,] -0.6611566571 0.3329183314 ## [25,] -0.0665619358 -0.0861627806 ## [26,] -0.1391427908 0.7026453006 ## [27,] -0.0369851507 0.2471814931 ## [28,] -0.2101228740 -0.4064717394 ## [29,] -0.1084072611 0.2131938850 ## [30,] -0.7508452724 -0.2980708723 ## [31,] -0.2148846336 0.0851784568 ## [32,] 0.3487517019 -0.0028607100 ## [33,] -0.1924607646 0.3622086845 ## PC17 PC18 ## [1,] -0.352423436 0.1849763871 ## [2,] 0.858779912 -0.0168046886 ## [3,] -0.272172093 0.0417189890 ## [4,] -0.829091015 -0.2686385968 ## [5,] 0.284857891 0.3704118495 ## [6,] 0.666561361 0.3272508389 ## [7,] -0.215194832 0.6893714137 ## [8,] 0.566199110 -0.0944139094 ## [9,] -0.430202232 -0.7421202651 ## [10,] -0.252754483 -0.1035741672 ## [11,] 0.207209470 0.5604352996 ## [12,] 0.001124218 -0.1300032256 ## [13,] -0.051489870 -0.0330634875 ## [14,] 0.582021247 0.4871704505 ## [15,] 0.213318321 0.7383512934 ## [16,] -0.795063795 -0.1066044771 ## [17,] 0.233518612 -0.1310457690 ## [18,] -0.005059052 -0.4779992670 ## [19,] 0.034992121 0.2533538329 ## [20,] -0.237633353 0.5558245627 ## [21,] 0.077826800 0.0136576822 ## [22,] 0.300130122 0.0505198917 ## [23,] -0.050773594 0.0241747636 ## [24,] 0.402934051 -0.0975407878 ## [25,] -0.150132066 0.5141783180 ## [26,] 0.496375950 -0.5539477586 ## [27,] -0.026017826 0.1823459047 ## [28,] 0.126050342 0.8658563301 ## [29,] 0.185731642 0.7753601944 ## [30,] 0.105719408 0.2537981890 ## [31,] -0.822926271 -0.1774960545 ## [32,] -0.040339069 -0.0041754064 ## [33,] -0.406522801 0.3447920608 ## PC19 PC20 ## [1,] -1.1719520402 -1.309508e-01 ## [2,] -0.4262764711 -3.819397e-01 ## [3,] 0.2437350719 -1.063142e-01 ## [4,] 0.1650200174 4.133721e-01 ## [5,] -0.5220218096 1.199820e-02 ## [6,] -0.4615468719 -2.242775e-01 ## [7,] 0.0632748976 -3.127535e-01 ## [8,] -0.1477514984 -5.223907e-01 ## [9,] 0.3237605372 -2.290706e-01 ## [10,] 0.1683441242 -7.452272e-01 ## [11,] 0.3398166087 6.073698e-01 ## [12,] 0.2541621650 5.240126e-01 ## [13,] 0.5294094905 -3.335573e-01 ## [14,] -0.2823107406 -5.335835e-01 ## [15,] 0.5186459265 9.798171e-02 ## [16,] 0.6389647516 2.523367e-01 ## [17,] 0.2876657138 6.387414e-01 ## [18,] -0.5517613364 -3.326839e-01 ## [19,] -0.5058280623 -4.814793e-01 ## [20,] -0.3029091573 -4.510151e-01 ## [21,] -0.4677456251 8.079612e-01 ## [22,] 0.0901196278 -2.642000e-01 ## [23,] 0.1489592079 -7.255643e-02 ## [24,] -0.3222915594 9.900900e-02 ## [25,] 0.7243540579 8.476321e-03 ## [26,] 0.2367009896 9.730178e-02 ## [27,] -0.1268682261 1.812839e-01 ## [28,] -0.0908513214 1.748288e-01 ## [29,] -0.7342385706 -2.408651e-01 ## [30,] 0.6119359359 -7.041414e-02 ## [31,] -0.4643611102 1.338120e-01 ## [32,] 0.3918576666 -5.838093e-01 ## [33,] -0.2161790677 -6.033604e-01 ## PC21 PC22 ## [1,] 0.9486633941 0.2725487496 ## [2,] -0.1832600316 0.0146136979 ## [3,] 0.4432161201 -0.6697553300 ## [4,] 0.4998303930 -0.6924413892 ## [5,] -0.3256593763 -0.1658230397 ## [6,] -0.0029435286 0.2837847084 ## [7,] 0.3523660787 0.1847740271 ## [8,] -0.3615521559 0.1344057950 ## [9,] -0.3887910985 -0.1204817940 ## [10,] 0.6817391456 -0.1374935042 ## [11,] 0.8259210130 0.0261791557 ## [12,] -0.3396831558 0.1050764256 ## [13,] -0.5017935033 0.6297442893 ## [14,] -0.3580496168 -0.6077310661 ## [15,] -0.1083020678 -0.1837388002 ## [16,] -0.2351540369 0.7353067822 ## [17,] 0.0390566109 0.1772147531 ## [18,] -0.1223342362 -0.4165145144 ## [19,] -0.5815658174 -0.0397919738 ## [20,] -0.0365467431 0.3934221539 ## [21,] -0.8421447700 0.5365191198 ## [22,] -0.3728844242 0.0991687197 ## [23,] -0.7756854713 0.4001737601 ## [24,] -0.0785924797 -0.2209501772 ## [25,] 0.0801759866 -0.0171351322 ## [26,] 0.7243050027 0.0952408739 ## [27,] 0.1812711314 0.1413158243 ## [28,] 0.1674670411 0.0398466317 ## [29,] -0.1069870975 -0.2403294692 ## [30,] 1.0355274916 -0.1509802181 ## [31,] -0.3556449488 0.2086409713 ## [32,] 0.1791646747 -0.4090111261 ## [33,] -0.2553012373 0.5459812283 ## PC23 PC24 ## [1,] -0.6174999500 0.2788879421 ## [2,] -0.4608498149 -0.3564988030 ## [3,] 0.3109514369 0.6579423311 ## [4,] -0.4537467013 0.1704078041 ## [5,] -0.1192888733 0.1039274924 ## [6,] -0.2669416219 -0.0262239514 ## [7,] -0.1131784520 0.2127648941 ## [8,] -0.4212127184 -0.7517953437 ## [9,] 0.0051808367 -0.2713951288 ## [10,] 0.5581297238 -0.1262035305 ## [11,] 0.0695955847 0.8678859172 ## [12,] 0.2296991372 0.0962837458 ## [13,] 0.1848080013 0.4878068327 ## [14,] -0.0983059909 0.4763112613 ## [15,] 0.0256664087 0.2912266490 ## [16,] 0.1152741941 0.5112684810 ## [17,] -0.4933754696 0.0792454346 ## [18,] -0.1262541245 -0.1596578866 ## [19,] -0.5797523338 -0.2379237917 ## [20,] 0.1218093292 -0.2496526693 ## [21,] 0.0290333697 -0.3944591558 ## [22,] 0.3618503714 -0.3702098866 ## [23,] 0.0664162904 0.0555530075 ## [24,] 0.1813861871 -0.4344027438 ## [25,] -0.5221405288 -0.1392928931 ## [26,] 0.4438840838 -0.1160390865 ## [27,] 0.0238519739 0.4138093381 ## [28,] 0.1344798050 -0.1531954139 ## [29,] -0.0550463633 -0.2089804798 ## [30,] 0.0496861817 0.5657388836 ## [31,] 0.4406126026 0.1238483700 ## [32,] 0.0891404754 -0.5481804772 ## [33,] 0.2173763319 0.1641242918 ## PC25 PC26 ## [1,] 0.366231675 0.8017177062 ## [2,] 0.108320184 -0.4492094690 ## [3,] -0.155264665 0.3130362072 ## [4,] 0.377226087 0.1313681750 ## [5,] -0.056470623 0.1413425519 ## [6,] 0.225894074 0.3244142047 ## [7,] 0.062030616 0.1858122539 ## [8,] 0.185916460 -0.4170620686 ## [9,] 0.167005119 -0.1958772102 ## [10,] 0.259279223 -0.2165126516 ## [11,] -0.065147090 0.1882808118 ## [12,] -0.020091256 0.2981107522 ## [13,] 0.252249465 0.2163102134 ## [14,] -0.015990192 0.0051451358 ## [15,] -0.005469031 0.2536262319 ## [16,] 0.047306968 -0.0533150023 ## [17,] 0.447620403 0.0033785925 ## [18,] 0.290867755 -0.2161134893 ## [19,] -0.207415799 -0.2338643050 ## [20,] 0.486374711 -0.3841658841 ## [21,] -0.120238325 0.0509731803 ## [22,] 0.155765983 -0.3632556575 ## [23,] 0.751499457 -0.1381989375 ## [24,] 0.286908559 -0.2892115408 ## [25,] 0.128870780 -0.1902934129 ## [26,] 0.261903606 0.0691621185 ## [27,] 0.372981375 0.0958039966 ## [28,] 0.096557167 -0.0528509276 ## [29,] -0.207990459 0.3153789621 ## [30,] -0.135442424 -0.6950177304 ## [31,] 0.053468032 0.0085773417 ## [32,] 0.009030703 0.5091202581 ## [33,] -0.043316628 -0.0743167703 ## PC27 PC28 ## [1,] 0.0826537568 -0.5573676362 ## [2,] 0.1405251197 -0.2936136244 ## [3,] 0.0371619421 0.2341885556 ## [4,] -0.1014178226 -0.1379630469 ## [5,] 0.1308375378 0.1931948241 ## [6,] -0.0970768386 0.4598797130 ## [7,] 0.0070727890 0.1256159734 ## [8,] -0.0494829290 -0.3005985634 ## [9,] -0.1800189820 0.0638388365 ## [10,] 0.2729350029 -0.0491650458 ## [11,] 0.1024673121 0.1869348532 ## [12,] -0.1344531522 0.0248220177 ## [13,] -0.0022547056 -0.1361978140 ## [14,] -0.3537892166 0.0180258811 ## [15,] 0.1792919304 0.1298776396 ## [16,] -0.0466988018 0.2896541561 ## [17,] 0.0368415283 0.2640738507 ## [18,] 0.1216954626 -0.3127504499 ## [19,] 0.0053620875 -0.2991802805 ## [20,] -0.4823144837 -0.0210750504 ## [21,] 0.1030470175 0.0915469123 ## [22,] -0.0063732010 0.0133262169 ## [23,] -0.1954041360 0.3215322138 ## [24,] -0.0411985752 0.1704165411 ## [25,] -0.5813950070 -0.1999109936 ## [26,] -0.2022721825 -0.1209729514 ## [27,] -0.2126489939 -0.1218949881 ## [28,] -0.2655067453 0.2182900225 ## [29,] -0.0312391590 -0.1322776967 ## [30,] 0.2351284424 0.4574449821 ## [31,] 0.3600018159 0.3255643536 ## [32,] 0.3670162790 -0.1308016791 ## [33,] -0.4214843475 -0.1088967087 ## PC29 PC30 ## [1,] -0.4203058577 -0.0992378818 ## [2,] 0.4066173927 -0.1956506428 ## [3,] -0.0466426156 0.2711223501 ## [4,] 0.2205926764 0.0490570752 ## [5,] -0.0650068446 -0.0159521514 ## [6,] -0.3438998598 0.5271828553 ## [7,] 0.1494015570 -0.2549816574 ## [8,] 0.1315676255 -0.2374221276 ## [9,] -0.1628972720 0.0363915976 ## [10,] -0.1640882312 0.3837837517 ## [11,] -0.0888562321 0.2369502635 ## [12,] 0.0568941680 -0.2897886688 ## [13,] -0.1935636063 0.2195945418 ## [14,] 0.2618728850 -0.0260650663 ## [15,] -0.0360534923 0.0349954735 ## [16,] -0.5739155998 -0.0873546663 ## [17,] -0.0520714664 0.4323884603 ## [18,] 0.0385658008 -0.0586840457 ## [19,] 0.2981586830 0.1901659452 ## [20,] 0.3147993287 0.2506605885 ## [21,] -0.0497784911 0.0588039195 ## [22,] 0.0331577336 0.2094759699 ## [23,] -0.1034404802 -0.3293906434 ## [24,] 0.1002805850 -0.2504082915 ## [25,] -0.2902425458 0.0171283339 ## [26,] -0.2179966536 0.0786901833 ## [27,] 0.1482895923 -0.0618826793 ## [28,] -0.1180357870 0.1412909414 ## [29,] -0.2281612585 0.2159213556 ## [30,] 0.2410311182 0.0936368508 ## [31,] 0.1091721069 -0.2019509203 ## [32,] 0.2684521919 -0.1250244555 ## [33,] -0.1199523417 0.2274064406 ## [ reached getOption(&quot;max.print&quot;) -- omitted 967 rows ] #Now looking at rotation head(observ_x, 1 ) %*% pr_out$rotation[,1] ## [,1] ## [1,] 0.2608863 #k is which column are we going to examine j &lt;- 2 plot(pr_out$rotation[, j]) abline(h = 0) which(abs(pr_out$rotation[, j]) &gt; 0.2) ## [1] 1 7 9 19 22 23 27 # what is the truth we should be comparing to? #What is rotation. Matrix (30 x 30 in this case) dim(pr_out$rotation) ## [1] 30 30 #it is actually p x p rather than p x k to give you more columns head(pr_out$rotation[,k]) ## [1] 0.094040701 -0.046516373 -0.026237528 ## [4] 0.381229061 -0.002178540 -0.006235911 #kth eigenvector which correspods with the kth largest value (most significant) value #this will always be 1. Property of rotation matrix sum(pr_out$rotation[,k]^2) ## [1] 1 "],["principal-component-analysis-applied.html", "Chapter 4 Principal Component Analysis Applied! 4.1 Citation data", " Chapter 4 Principal Component Analysis Applied! 4.1 Citation data 4.1.1 Other example In really poor countries it is super hard to measure wealth and income. There are no reciepts and corresponding taxes. People don’t have bank accounts. Instead, you measure features. Like do you have a fridge. Do you have cooking equipment? How many kids? How many room in your house? So you could run PCA on assets matrix. You can find correlations. If you have more rooms in your house, you likely have more education. The correlations will be baked into the principal driving component. Further, they use this as the Y to see if they can predict! But that is beyond the scope of this class. library(jsonlite) #citation count between his 15 papers and those he sighted citations &lt;- read.csv(&quot;Datasets/j_cunningham_citation.csv&quot;, head = FALSE) titles &lt;- read_json(&quot;Datasets/j_cunningham_citation_titles.json&quot;) #Explore the data dim(citations) ## [1] 15 754 head(citations) ## V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 V12 V13 ## 1 0 0 0 0 0 0 0 0 0 0 0 0 0 ## V14 V15 V16 V17 V18 V19 V20 V21 V22 V23 ## 1 0 0 0 0 0 0 0 0 0 0 ## V24 V25 V26 V27 V28 V29 V30 V31 V32 V33 ## 1 0 0 0 0 0 0 0 0 0 0 ## V34 V35 V36 V37 V38 V39 V40 V41 V42 V43 ## 1 0 0 0 0 0 1 0 0 0 0 ## V44 V45 V46 V47 V48 V49 V50 V51 V52 V53 ## 1 0 0 0 0 0 0 0 0 0 0 ## V54 V55 V56 V57 V58 V59 V60 V61 V62 V63 ## 1 0 0 0 0 0 0 0 0 0 0 ## V64 V65 V66 V67 V68 V69 V70 V71 V72 V73 ## 1 0 0 0 0 0 0 0 0 0 0 ## V74 V75 V76 V77 V78 V79 V80 V81 V82 V83 ## 1 0 0 0 0 0 0 0 0 0 0 ## V84 V85 V86 V87 V88 V89 V90 V91 V92 V93 ## 1 0 0 0 0 0 0 0 0 0 0 ## V94 V95 V96 V97 V98 V99 V100 V101 V102 ## 1 0 0 0 0 0 0 0 0 0 ## V103 V104 V105 V106 V107 V108 V109 V110 ## 1 0 0 0 0 0 0 0 0 ## V111 V112 V113 V114 V115 V116 V117 V118 ## 1 0 0 0 0 0 0 0 0 ## V119 V120 V121 V122 V123 V124 V125 V126 ## 1 0 0 0 0 0 0 0 0 ## V127 V128 V129 V130 V131 V132 V133 V134 ## 1 0 0 0 0 0 0 0 0 ## V135 V136 V137 V138 V139 V140 V141 V142 ## 1 1 1 1 0 1 7 3 0 ## V143 V144 V145 V146 V147 V148 V149 V150 ## 1 0 2 2 3 0 2 3 0 ## V151 V152 V153 V154 V155 V156 V157 V158 ## 1 3 0 3 3 8 0 0 3 ## V159 V160 V161 V162 V163 V164 V165 V166 ## 1 2 6 0 0 0 4 1 0 ## V167 V168 V169 V170 V171 V172 V173 V174 ## 1 1 0 0 1 1 0 0 1 ## V175 V176 V177 V178 V179 V180 V181 V182 ## 1 0 1 2 0 0 1 0 1 ## V183 V184 V185 V186 V187 V188 V189 V190 ## 1 0 0 1 4 0 1 0 0 ## V191 V192 V193 V194 V195 V196 V197 V198 ## 1 1 2 0 0 1 2 0 2 ## V199 V200 V201 V202 V203 V204 V205 V206 ## 1 0 0 1 1 0 0 2 1 ## V207 V208 V209 V210 V211 V212 V213 V214 ## 1 0 3 0 1 1 0 0 3 ## V215 V216 V217 V218 V219 V220 V221 V222 ## 1 0 2 3 0 0 2 0 0 ## V223 V224 V225 V226 V227 V228 V229 V230 ## 1 1 0 0 1 0 0 1 0 ## V231 V232 V233 V234 V235 V236 V237 V238 ## 1 1 1 0 1 1 0 1 0 ## V239 V240 V241 V242 V243 V244 V245 V246 ## 1 1 1 0 1 1 0 0 0 ## V247 V248 V249 V250 V251 V252 V253 V254 ## 1 0 1 0 1 1 0 0 0 ## V255 V256 V257 V258 V259 V260 V261 V262 ## 1 0 1 0 1 0 0 0 1 ## V263 V264 V265 V266 V267 V268 V269 V270 ## 1 0 1 0 0 0 0 1 1 ## V271 V272 V273 V274 V275 V276 V277 V278 ## 1 0 0 0 0 1 1 0 1 ## V279 V280 V281 V282 V283 V284 V285 V286 ## 1 0 0 0 1 0 2 0 1 ## V287 V288 V289 V290 V291 V292 V293 V294 ## 1 0 1 0 2 1 1 1 0 ## V295 V296 V297 V298 V299 V300 V301 V302 ## 1 1 0 1 0 0 0 1 1 ## V303 V304 V305 V306 V307 V308 V309 V310 ## 1 1 0 1 0 0 1 0 1 ## V311 V312 V313 V314 V315 V316 V317 V318 ## 1 0 1 0 0 0 0 0 0 ## V319 V320 V321 V322 V323 V324 V325 V326 ## 1 0 0 0 0 0 0 0 0 ## V327 V328 V329 V330 V331 V332 V333 V334 ## 1 0 0 0 0 0 0 0 0 ## V335 V336 V337 V338 V339 V340 V341 V342 ## 1 0 0 0 0 0 0 0 0 ## V343 V344 V345 V346 V347 V348 V349 V350 ## 1 0 0 0 0 0 0 0 0 ## V351 V352 V353 V354 V355 V356 V357 V358 ## 1 0 0 0 0 0 0 0 0 ## V359 V360 V361 V362 V363 V364 V365 V366 ## 1 0 0 0 0 0 0 0 0 ## V367 V368 V369 V370 V371 V372 V373 V374 ## 1 0 0 0 0 0 0 0 0 ## V375 V376 V377 V378 V379 V380 V381 V382 ## 1 0 0 0 0 0 0 0 0 ## V383 V384 V385 V386 V387 V388 V389 V390 ## 1 0 0 0 0 0 0 0 0 ## V391 V392 V393 V394 V395 V396 V397 V398 ## 1 0 0 0 0 0 0 0 0 ## V399 V400 V401 V402 V403 V404 V405 V406 ## 1 0 0 0 0 0 0 0 0 ## V407 V408 V409 V410 V411 V412 V413 V414 ## 1 0 0 0 0 0 0 0 0 ## V415 V416 V417 V418 V419 V420 V421 V422 ## 1 0 0 0 0 0 5 0 0 ## V423 V424 V425 V426 V427 V428 V429 V430 ## 1 0 0 0 0 0 5 0 0 ## V431 V432 V433 V434 V435 V436 V437 V438 ## 1 0 0 0 0 0 0 0 0 ## V439 V440 V441 V442 V443 V444 V445 V446 ## 1 0 0 0 0 0 0 0 0 ## V447 V448 V449 V450 V451 V452 V453 V454 ## 1 0 0 0 0 0 0 0 0 ## V455 V456 V457 V458 V459 V460 V461 V462 ## 1 0 0 0 0 0 0 0 0 ## V463 V464 V465 V466 V467 V468 V469 V470 ## 1 0 0 0 0 0 0 0 0 ## V471 V472 V473 V474 V475 V476 V477 V478 ## 1 0 0 0 0 0 0 0 0 ## V479 V480 V481 V482 V483 V484 V485 V486 ## 1 0 0 0 0 0 0 0 0 ## V487 V488 V489 V490 V491 V492 V493 V494 ## 1 0 0 0 0 0 0 0 0 ## V495 V496 V497 V498 V499 V500 V501 V502 ## 1 0 0 0 0 0 0 0 0 ## V503 V504 V505 V506 V507 V508 V509 V510 ## 1 0 0 0 0 0 0 0 0 ## V511 V512 V513 V514 V515 V516 V517 V518 ## 1 0 0 0 0 0 0 0 0 ## V519 V520 V521 V522 V523 V524 V525 V526 ## 1 0 0 0 0 0 0 0 0 ## V527 V528 V529 V530 V531 V532 V533 V534 ## 1 0 0 0 0 0 0 0 0 ## V535 V536 V537 V538 V539 V540 V541 V542 ## 1 0 0 0 0 0 0 0 0 ## V543 V544 V545 V546 V547 V548 V549 V550 ## 1 0 0 0 0 0 0 0 0 ## V551 V552 V553 V554 V555 V556 V557 V558 ## 1 0 0 0 0 0 0 0 0 ## V559 V560 V561 V562 V563 V564 V565 V566 ## 1 0 0 0 3 0 0 0 0 ## V567 V568 V569 V570 V571 V572 V573 V574 ## 1 0 0 0 0 0 0 0 0 ## V575 V576 V577 V578 V579 V580 V581 V582 ## 1 0 0 0 0 0 0 0 0 ## V583 V584 V585 V586 V587 V588 V589 V590 ## 1 0 0 0 0 0 0 0 0 ## V591 V592 V593 V594 V595 V596 V597 V598 ## 1 0 0 0 0 0 0 0 0 ## V599 V600 V601 V602 V603 V604 V605 V606 ## 1 0 0 0 0 0 0 0 0 ## V607 V608 V609 V610 V611 V612 V613 V614 ## 1 0 0 0 0 0 0 0 0 ## V615 V616 V617 V618 V619 V620 V621 V622 ## 1 0 0 0 0 0 0 0 0 ## V623 V624 V625 V626 V627 V628 V629 V630 ## 1 0 0 0 0 0 0 0 0 ## V631 V632 V633 V634 V635 V636 V637 V638 ## 1 0 0 0 0 0 0 0 0 ## V639 V640 V641 V642 V643 V644 V645 V646 ## 1 0 0 0 0 0 0 0 1 ## V647 V648 V649 V650 V651 V652 V653 V654 ## 1 0 0 0 0 0 0 0 0 ## V655 V656 V657 V658 V659 V660 V661 V662 ## 1 0 0 0 0 0 0 0 0 ## V663 V664 V665 V666 V667 V668 V669 V670 ## 1 0 0 0 0 0 0 0 0 ## V671 V672 V673 V674 V675 V676 V677 V678 ## 1 0 0 0 0 0 0 0 0 ## V679 V680 V681 V682 V683 V684 V685 V686 ## 1 0 0 0 0 0 0 0 0 ## V687 V688 V689 V690 V691 V692 V693 V694 ## 1 0 0 0 0 0 0 0 0 ## V695 V696 V697 V698 V699 V700 V701 V702 ## 1 0 0 0 0 0 0 0 0 ## V703 V704 V705 V706 V707 V708 V709 V710 ## 1 0 0 0 0 0 0 0 0 ## V711 V712 V713 V714 V715 V716 V717 V718 ## 1 0 0 0 0 0 0 0 0 ## V719 V720 V721 V722 V723 V724 V725 V726 ## 1 0 0 0 0 0 0 0 0 ## V727 V728 V729 V730 V731 V732 V733 V734 ## 1 0 0 0 0 0 0 0 0 ## V735 V736 V737 V738 V739 V740 V741 V742 ## 1 0 0 0 0 0 0 0 0 ## V743 V744 V745 V746 V747 V748 V749 V750 ## 1 0 0 0 0 0 0 0 0 ## V751 V752 V753 V754 ## 1 0 0 0 0 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 5 rows ] citations[1:5,1:5] ## V1 V2 V3 V4 V5 ## 1 0 0 0 0 0 ## 2 0 0 0 0 0 ## 3 0 0 0 0 0 ## 4 0 0 0 0 0 ## 5 0 0 0 0 0 max(citations) ## [1] 14 #across all paers apply(citations, 1, max) ## [1] 8 7 14 5 5 8 6 8 11 5 3 5 11 ## [14] 3 4 names(titles) ## [1] &quot;auth_titles&quot; &quot;ref_titles&quot; Papers that he has written: head(titles[[&quot;auth_titles&quot;]],3) ## [[1]] ## [1] &quot;Value and choice as separable, stable representations in orbitofrontal cortex&quot; ## ## [[2]] ## [1] &quot;Calibrating deep convolutional gaussian processes&quot; ## ## [[3]] ## [1] &quot;Neural trajectories in the supplementary motor area and motor cortex exhibit distinct geometries, compatible with different classes of computation&quot; Papers he has cited head(titles[[&quot;ref_titles&quot;]],3) ## [[1]] ## [1] &quot;On improved estimation of normal precision matrix and discriminant coefficients&quot; ## ## [[2]] ## [1] &quot;Snakemake--a scalable bioinformatics workflow engine&quot; ## ## [[3]] ## [1] &quot;Bayesian source localization with the multivariate laplace prior&quot; Among the 15, there are four papers that reference the 2 most popular articles. Let us find them: ref_count &lt;- apply(citations, 2, function(x) sum(x &gt; 0)) targets &lt;- tail(names(sort(ref_count)),2) #These are the two columns we want target_ind &lt;- which(names(citations) %in% targets) target_ind ## [1] 186 428 titles[[&quot;ref_titles&quot;]][target_ind] ## [[1]] ## [1] &quot;A category-free neural population supports evolving demands during decision-making&quot; ## ## [[2]] ## [1] &quot;Reorganization between preparatory and movement population responses in motor cortex&quot; Explore this data: we know the index of the two. This can show the correlation between the two, meaning the papers are cited by certain papers. This would make sense. If you cite one of these, you almost certainly have to cite the other: citations[,target_ind] ## V186 V428 ## 1 4 5 ## 2 0 0 ## 3 1 1 ## 4 0 0 ## 5 0 0 ## 6 0 0 ## 7 0 0 ## 8 0 0 ## 9 3 1 ## 10 0 0 ## 11 0 0 ## 12 0 0 ## 13 0 0 ## 14 0 0 ## 15 2 1 A few things to remember. Longer papers should have more citations. There is also likely to be correlation between certain papers. We would intuitively just want to apply our “prcomp”, like we learned in last class. pr_out &lt;- prcomp(citations) plot(pr_out$sdev, main=&quot;&quot;) This plot is not very appealing. There is not a significant drop until the last term. Maybe between 1 and 2 and 3 and 4, but not a big drop. And if you only abandon 1 dimension, (14 instead of 15), you aren’t really saving a lot. 4.1.1.1 Try standardizing the citation matrix in different ways 4.1.1.1.1 Usual standardization, i.e. make each feature mean=0 and sd = 1 norm_citation &lt;- apply(citations, 2 , scale) #also pr_out &lt;- prcomp(norm_citation) plot(pr_out$sdev, main=&quot;&quot;) png(&quot;Datasets/loadings_normal_standardization.png&quot;, 900, 700) par(mfrow=c(4, 3)) for(i in seq_len(ncol(pr_out$rotation[,1:12]))){ eigenvec &lt;- pr_out$rotation[, i] plot(eigenvec, main = paste(&quot;Eigenvec&quot;,i)) abline(h=0) } dev.off() ## png ## 2 Plots using normal standardization Remember from the plot, if we square all the values and add them together they will equal one. So strong deviations will be papers that are relied on (by index). Too many papers that share the same weight, might not be helpful. We believe there are only a few really good papers that we want. Not like 50. So this behavior is still undesirable. This is bad! You subtract something away from 0 values. But we like 0s because they don’t affect the objective function. PCA is using the “frebenious norm” where everything squared and added together is 1. So we like 0s. So how can we scale differently, but while keeping the 0s. 4.1.1.1.2 Max normalized, i.e. make each feature min=0, max = 1 #lets divide by the max, then everything is between 0 and one norm_citation &lt;- apply(citations, 2, function(x) x / max(x)) pr_out &lt;- prcomp(norm_citation, center=FALSE, scale=FALSE) png(&quot;Datasets/max_normalized.png&quot;, 900, 700) par(mfrow=c(4, 3)) for(i in seq_len(ncol(pr_out$rotation[,1:12]))){ eigenvec &lt;- pr_out$rotation[, i] plot(eigenvec, main = paste(&quot;Eigenvec&quot;,i)) abline(h=0) } dev.off() ## png ## 2 This should look much nicer. For example, Eigvec 4 looks better. Why did we normalize the columns? We often do this because the columns have different units. However, in this, the columns all have the same units. Instead, papers have different lengths, so the citation number can be affected by the length of the paper. So whay do we want to actually normalize? The rows! 4.1.1.1.3 Max normalized per paper, i.e. make each ROW min=0, max = 1 citations_norm_papers &lt;- apply(citations, 1, function(x) x / max(x)) # Just doing the above actually swapped things! We have 15 columns instead #It processes a row, and then stacks it as a column. So we need to transpose citations_norm_papers &lt;- t(citations_norm_papers) pr_out &lt;- prcomp(citations_norm_papers) plot(pr_out$sdev, main=&quot;&quot;) png(&quot;Datasets/loadings_norm_per_paper.png&quot;, 900, 700) par(mfrow=c(4, 3)) for(i in seq_len(ncol(pr_out$rotation[,1:12]))){ eigenvec &lt;- pr_out$rotation[, i] plot(eigenvec) abline(h=0) } dev.off() ## png ## 2 Ther is a much more noticable drop between 11 and 12 pr_out &lt;- prcomp(citations) plot(pr_out$sdev, main=&quot;&quot;) png(&quot;Datasets/loadings.png&quot;, 900, 700) par(mfrow=c(4, 3)) for(i in seq_len(ncol(pr_out$rotation[,1:12]))){ eigenvec &lt;- pr_out$rotation[, i] plot(eigenvec) abline(h=0) } dev.off() ## png ## 2 target_ind &lt;- which(abs(pr_out$rotation[, 2]) &gt; 0.15) titles[[&quot;ref_titles&quot;]][target_ind] ## [[1]] ## [1] &quot;Motor cortex embeds muscle-like commands in an untangled population response&quot; ## ## [[2]] ## [1] &quot;Flexible sensorimotor computations through rapid reconfiguration of cortical dynamics&quot; ## ## [[3]] ## [1] &quot;Neuronal activity in the supplementary and presupplementary motor areas for temporal organization of multiple movements&quot; ## ## [[4]] ## [1] &quot;Role for supplementary motor area cells in planning several movements ahead&quot; ## ## [[5]] ## [1] &quot;The role of human primary motor cortex in the production of skilled finger sequences&quot; 1st column second row is 2nd column 3rd row is a disaster. 4.1.2 Fishing out various titles "],["pca-on-weather-data-example.html", "Chapter 5 PCA on weather data example 5.1 Different noramlizations", " Chapter 5 PCA on weather data example Wrap up the citation problem Play with weather data, tmax, celsius df &lt;- read.csv(&quot;Datasets/ushcn.csv&quot;) station &lt;- read.csv(&quot;Datasets/station_metadata.csv&quot;) rownames(station) &lt;- station$id meta_sort &lt;- station[names(df)[-1], c(&quot;longitude&quot;, &quot;latitude&quot;)] prop_na &lt;- apply(df[, -1], 1, function(x) mean(is.na(x))) sdf &lt;- df[prop_na &lt; 0.1, ] sdf_sans_na &lt;- apply(sdf[, -1], 2, function(x){ x[is.na(x)] &lt;- mean(x, na.rm=TRUE) return(x) }) library(RColorBrewer) cols &lt;- brewer.pal(7, &quot;RdYlBu&quot;) pr_out &lt;- prcomp(sdf_sans_na) png(&quot;Pictures/no_norm_pca.png&quot;, 600, 800) par(mfrow=c(2, 1)) for(i in 1:2){ eigvec &lt;- pr_out$rotation[, i] breaks &lt;- seq(min(eigvec), max(eigvec), length.out=length(cols)+1) col_factors &lt;- cut(eigvec, breaks=breaks) plot(meta_sort$longitude, meta_sort$latitude, col=cols[col_factors], pch=16, cex=0.5) legend(&quot;bottomright&quot;, legend = levels(col_factors), fill=cols) } dev.off() ## png ## 2 Eigenvector 1 and two mapped The two are telling in very different ways. The first shows the relationships of the coasts. The second shows east versus west. This is with default normalization: centering, but not scaling. 5.1 Different noramlizations Run PCA with 3 different types of normalization on the maximum temperature data, then plot the “maps” of the loading values corresponding to the first 2 eigenvectors. No normalization, i.e. no centering and no scaling Centering but no scaling Centering and scaling Write out what do you observe. 5.1.1 No normalization prop_na &lt;- apply(df[, -1], 1, function(x) mean(is.na(x))) sdf &lt;- df[prop_na &lt; 0.1, ] sdf_sans_na &lt;- apply(sdf[, -1], 2, function(x){ x[is.na(x)] &lt;- mean(x, na.rm=TRUE) return(x) }) cols &lt;- brewer.pal(7, &quot;RdYlBu&quot;) pr_out &lt;- prcomp(sdf_sans_na, scale = FALSE, center = FALSE) png(&quot;Pictures/no_standardization_pca.png&quot;, 600, 800) par(mfrow=c(2, 1)) for(i in 1:2){ eigvec &lt;- pr_out$rotation[, i] breaks &lt;- seq(min(eigvec), max(eigvec), length.out=length(cols)+1) col_factors &lt;- cut(eigvec, breaks=breaks) plot(meta_sort$longitude, meta_sort$latitude, col=cols[col_factors], pch=16, cex=0.5) legend(&quot;bottomright&quot;, legend = levels(col_factors), fill=cols) } dev.off() ## png ## 2 5.1.2 Centering and scaling prop_na &lt;- apply(df[, -1], 1, function(x) mean(is.na(x))) sdf &lt;- df[prop_na &lt; 0.1, ] sdf_sans_na &lt;- apply(sdf[, -1], 2, function(x){ x[is.na(x)] &lt;- mean(x, na.rm=TRUE) return(x) }) library(RColorBrewer) pr_out &lt;- prcomp(sdf_sans_na, center = TRUE, scale = TRUE) png(&quot;Pictures/centering_and_scaling_pca.png&quot;, 600, 800) par(mfrow=c(2, 1)) for(i in 1:2){ eigvec &lt;- pr_out$rotation[, i] breaks &lt;- seq(min(eigvec), max(eigvec), length.out=length(cols)+1) col_factors &lt;- cut(eigvec, breaks=breaks) plot(meta_sort$longitude, meta_sort$latitude, col=cols[col_factors], pch=16, cex=0.5) legend(&quot;bottomright&quot;, legend = levels(col_factors), fill=cols) } dev.off() ## png ## 2 Scaling is super common. When you have different units you always usually scale. However, sometimes, with things like weather data, you might not have to. PCA is trying to find a very consice, uncorrelated description of your data. If things are close to 0, they won’t effect. Subset out the last 144 rows for testing, then pick one station to be our Y and the other stations to be our X. Run PCA on the X values, then fit an OLS Run OLS but only use the closest station (don’t bother with projecting, assuming Long/Lat are equidistance for now) as your X. Which one will do best? (if you have time, try Lasso with all of the data, this may take awhile….don’t do this unless you have time) #Takes last 144 for testing train &lt;- 1:(nrow(sdf_sans_na) - 144) # Samples and individual X to be the Y point y_ind &lt;- sample(ncol(sdf_sans_na), 1) y_train &lt;- sdf_sans_na[train, y_ind] x_train &lt;- sdf_sans_na[train, -y_ind] pr_out &lt;- prcomp(x_train, center = TRUE, scale = FALSE) ols &lt;- lm(y_train ~ x_train) library(tidyverse) ## ── Attaching packages ──── tidyverse 1.3.0 ── ## ✓ tibble 3.0.6 ✓ dplyr 1.0.4 ## ✓ tidyr 1.1.2 ✓ stringr 1.4.0 ## ✓ readr 1.4.0 ✓ forcats 0.5.1 ## ✓ purrr 0.3.4 ## ── Conflicts ─────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x purrr::flatten() masks jsonlite::flatten() ## x dplyr::lag() masks stats::lag() ## x purrr::lift() masks caret::lift() station_new &lt;- station %&gt;% mutate(long_difference = longitude - station$longitude[y_ind]) %&gt;% mutate(lat_difference = latitude - station$latitude[y_ind]) %&gt;% select(latitude, longitude, long_difference, lat_difference) %&gt;% mutate(sum_lat_long = lat_difference + long_difference) #%&gt;% #order(decreasing = TRUE, sum_lat_long) station_new ## latitude longitude ## USH00011084 31.0581 -87.0547 ## USH00012813 30.5467 -87.8808 ## USH00013160 32.8347 -88.1342 ## USH00013511 32.7017 -87.5808 ## USH00013816 31.8700 -86.2542 ## USH00015749 34.7442 -87.5997 ## USH00017157 34.1736 -86.8133 ## USH00017304 34.6736 -86.0536 ## USH00017366 32.4100 -87.0153 ## USH00018024 33.4164 -86.1350 ## USH00018178 31.5411 -87.8833 ## USH00018323 31.8075 -85.9722 ## USH00018380 33.2119 -87.6161 ## USH00018438 32.0142 -85.7464 ## USH00018469 34.5667 -85.6128 ## USH00020080 32.3697 -112.8600 ## USH00021026 33.3761 -112.5828 ## USH00021248 36.1533 -109.5394 ## USH00021514 33.2058 -111.6819 ## USH00021614 34.3494 -111.6981 ## USH00023160 35.2681 -111.7428 ## USH00023596 36.0528 -112.1503 ## USH00024089 34.9094 -110.1544 ## USH00024645 35.2000 -114.0167 ## USH00024849 36.8644 -111.6022 ## USH00025512 33.4044 -110.8700 ## USH00026250 34.1547 -114.2897 ## USH00026353 31.9356 -109.8378 ## USH00026796 34.5706 -112.4322 ## USH00027281 33.6731 -111.1508 ## USH00027370 33.0800 -111.7417 ## USH00027390 32.8150 -109.6808 ## USH00027435 34.5172 -109.4028 ## USH00027716 35.3322 -112.8797 ## USH00028619 31.7056 -110.0569 ## USH00028815 32.2292 -110.9536 ## USH00029271 33.8169 -109.9833 ## USH00029287 33.9792 -112.7403 ## USH00029359 35.2406 -112.1903 ## USH00029652 32.6114 -114.6350 ## USH00030936 34.8822 -91.2153 ## USH00031596 35.0842 -92.4289 ## USH00031632 36.4197 -90.5858 ## USH00032356 36.4164 -93.7917 ## USH00032444 36.1006 -94.1744 ## USH00032930 36.4261 -94.4481 ## USH00034572 36.4947 -91.5350 ## USH00034756 34.5731 -94.2494 ## USH00035186 35.6042 -91.2744 ## USH00035512 35.5125 -93.8683 ## USH00035754 34.2256 -92.0189 ## USH00035820 36.2639 -90.9681 ## USH00035908 33.8203 -93.3878 ## USH00036253 33.8100 -91.2703 ## USH00036928 35.3028 -93.6369 ## USH00040693 37.8744 -122.2589 ## USH00040924 33.6131 -114.5972 ## USH00041048 32.9544 -115.5581 ## USH00041614 41.5336 -120.1736 ## USH00041715 39.6911 -121.8211 ## USH00041758 32.6400 -117.0858 ## USH00041912 39.0911 -120.9481 ## USH00042239 32.9897 -116.5872 ## USH00042294 38.5350 -121.7761 ## USH00042319 36.4622 -116.8669 ## USH00042728 38.3306 -120.6706 ## USH00042910 40.8097 -124.1603 ## USH00042941 34.7042 -118.4275 ## USH00043161 39.5092 -123.7567 ## USH00043257 36.7800 -119.7194 ## USH00043747 36.3219 -119.6356 ## USH00043761 41.8042 -123.3758 ## USH00043875 38.6175 -122.8731 ## USH00044232 36.7981 -118.2036 ## USH00044259 33.7086 -116.2153 ## USH00044713 39.3183 -120.6392 ## USH00044890 36.3817 -119.0264 ## USH00044997 37.6922 -121.7692 ## USH00045032 38.1061 -121.2878 ## USH00045385 39.1458 -121.5853 ## USH00045532 37.2858 -120.5117 ## USH00045983 41.3206 -122.3081 ## USH00046074 38.2778 -122.2647 ## USH00046118 34.7675 -114.6189 ## USH00046175 33.6025 -117.8803 ## USH00046399 34.4478 -119.2275 ## USH00046506 39.7458 -122.1997 ## USH00046508 41.3089 -123.5317 ## USH00046719 34.1483 -118.1447 ## USH00046730 35.6278 -120.6856 ## USH00046826 38.2578 -122.6078 ## USH00047195 39.9367 -120.9475 ## USH00047304 40.5175 -122.2986 ## USH00047306 34.0528 -117.1894 ## USH00047851 35.3056 -120.6639 ## USH00047902 34.4167 -119.6844 ## USH00047916 36.9906 -121.9911 ## USH00047965 38.4381 -122.6978 ## USH00048702 40.4167 -120.6631 ## USH00048758 39.1678 -120.1428 ## USH00048839 35.0233 -118.7497 ## USH00049087 33.7025 -117.7539 ## USH00049122 39.1467 -123.2103 ## USH00049200 38.3956 -121.9608 ## USH00049452 35.5975 -119.3531 ## USH00049490 40.7222 -122.9331 ## USH00049699 39.5231 -122.3058 ## USH00049855 37.7500 -119.5897 ## USH00049866 41.7036 -122.6408 ## USH00050848 39.9919 -105.2667 ## USH00051294 38.4600 -105.2256 ## USH00051528 39.2203 -105.2783 ## USH00051564 38.8236 -102.3486 ## USH00051741 39.2425 -107.9631 ## USH00052184 37.6742 -106.3247 ## USH00052281 39.6261 -106.0353 ## USH00052446 38.4775 -102.7808 ## USH00053005 40.6147 -105.1314 ## USH00053038 40.2600 -103.8156 ## USH00053146 39.1653 -108.7331 ## USH00053662 38.5258 -106.9675 ## USH00053951 37.7717 -107.1097 ## USH00054076 38.0494 -102.1236 ## USH00054770 38.0936 -102.6306 ## USH00054834 38.0636 -103.2153 ## USH00055322 37.1742 -105.9392 ## USH00055722 38.4858 -107.8792 ## USH00057167 38.0392 -103.6933 ## USH00057337 38.0858 -106.1444 ## USH00057936 40.4883 -106.8233 ## USH00058204 37.9492 -107.8733 ## USH00058429 37.1786 -104.4869 ## USH00059243 40.0583 -102.2189 ## USH00062658 41.9500 -73.3667 ## USH00063207 41.3506 -72.0394 ## USH00067970 41.1247 -73.5475 ## USH00068138 41.7950 -72.2283 ## USH00072730 39.2583 -75.5167 ## USH00073595 38.8161 -75.5761 ## USH00075915 38.8983 -75.4250 ## USH00076410 39.6694 -75.7514 ## USH00079605 39.7739 -75.5414 ## USH00080211 29.7258 -85.0206 ## USH00080228 27.2181 -81.8739 ## USH00080478 27.8986 -81.8433 ## USH00080611 26.6928 -80.6711 ## USH00082220 30.7244 -86.0939 ## USH00082850 25.8489 -81.3897 ## USH00082915 29.7550 -81.5389 ## USH00082944 30.6589 -81.4636 ## USH00083163 26.1019 -80.2011 ## USH00083186 26.5850 -81.8614 ## USH00083207 27.4622 -80.3539 ## USH00084289 28.8031 -82.3125 ## USH00084570 24.5550 -81.7522 ## USH00084731 30.1853 -82.5942 ## USH00085275 30.4517 -83.4119 ## USH00086414 29.0803 -82.0778 ## USH00086997 30.4781 -87.1869 ## USH00087020 25.5819 -80.4361 ## USH00087851 28.3378 -82.2600 ## USH00088758 30.3931 -84.3533 ## USH00088824 28.1586 -82.7644 ## USH00088942 28.6242 -80.8158 ## USH00090140 31.5339 -84.1489 ## USH00090586 30.8228 -84.6175 ## USH00091340 31.1681 -81.5022 ## USH00091500 31.1903 -84.2036 ## USH00092318 33.5972 -83.8436 ## USH00092475 34.5292 -83.9900 ## USH00092966 32.2003 -83.2058 ## USH00093621 34.3006 -83.8600 ## USH00093754 31.9881 -81.9522 ## USH00094170 33.2842 -83.4681 ## USH00095874 33.0831 -83.2497 ## USH00095882 32.8703 -81.9672 ## USH00096335 33.4544 -84.8178 ## USH00097276 30.7836 -83.5692 ## USH00097600 34.2453 -85.1514 ## USH00097847 32.1300 -81.2100 ## USH00098535 32.6875 -84.5197 ## USH00098703 31.4461 -83.4767 ## USH00098740 34.5786 -83.3319 ## USH00099141 33.4028 -82.6222 ## USH00099157 33.7264 -82.7058 ## USH00099186 31.2514 -82.3128 ## USH00099291 32.8694 -85.1892 ## USH00100010 42.9536 -112.8253 ## USH00100448 43.5936 -115.9236 ## USH00100470 44.0425 -111.2739 ## USH00100803 42.3353 -111.3850 ## USH00101408 44.5733 -116.6753 ## USH00101956 47.6789 -116.8017 ## USH00102845 46.5022 -116.3217 ## USH00103143 46.0931 -115.5356 ## USH00103631 42.9403 -115.3231 ## USH00103732 42.5872 -111.7275 ## USH00104140 42.5972 -114.1378 ## USH00104295 42.3528 -114.5739 ## USH00104670 42.7325 -114.5192 ## long_difference lat_difference ## USH00011084 -8.7089 -4.4583 ## USH00012813 -9.5350 -4.9697 ## USH00013160 -9.7884 -2.6817 ## USH00013511 -9.2350 -2.8147 ## USH00013816 -7.9084 -3.6464 ## USH00015749 -9.2539 -0.7722 ## USH00017157 -8.4675 -1.3428 ## USH00017304 -7.7078 -0.8428 ## USH00017366 -8.6695 -3.1064 ## USH00018024 -7.7892 -2.1000 ## USH00018178 -9.5375 -3.9753 ## USH00018323 -7.6264 -3.7089 ## USH00018380 -9.2703 -2.3045 ## USH00018438 -7.4006 -3.5022 ## USH00018469 -7.2670 -0.9497 ## USH00020080 -34.5142 -3.1467 ## USH00021026 -34.2370 -2.1403 ## USH00021248 -31.1936 0.6369 ## USH00021514 -33.3361 -2.3106 ## USH00021614 -33.3523 -1.1670 ## USH00023160 -33.3970 -0.2483 ## USH00023596 -33.8045 0.5364 ## USH00024089 -31.8086 -0.6070 ## USH00024645 -35.6709 -0.3164 ## USH00024849 -33.2564 1.3480 ## USH00025512 -32.5242 -2.1120 ## USH00026250 -35.9439 -1.3617 ## USH00026353 -31.4920 -3.5808 ## USH00026796 -34.0864 -0.9458 ## USH00027281 -32.8050 -1.8433 ## USH00027370 -33.3959 -2.4364 ## USH00027390 -31.3350 -2.7014 ## USH00027435 -31.0570 -0.9992 ## USH00027716 -34.5339 -0.1842 ## USH00028619 -31.7111 -3.8108 ## USH00028815 -32.6078 -3.2872 ## USH00029271 -31.6375 -1.6995 ## USH00029287 -34.3945 -1.5372 ## USH00029359 -33.8445 -0.2758 ## USH00029652 -36.2892 -2.9050 ## USH00030936 -12.8695 -0.6342 ## USH00031596 -14.0831 -0.4322 ## USH00031632 -12.2400 0.9033 ## USH00032356 -15.4459 0.9000 ## USH00032444 -15.8286 0.5842 ## USH00032930 -16.1023 0.9097 ## USH00034572 -13.1892 0.9783 ## USH00034756 -15.9036 -0.9433 ## USH00035186 -12.9286 0.0878 ## USH00035512 -15.5225 -0.0039 ## USH00035754 -13.6731 -1.2908 ## USH00035820 -12.6223 0.7475 ## USH00035908 -15.0420 -1.6961 ## USH00036253 -12.9245 -1.7064 ## USH00036928 -15.2911 -0.2136 ## USH00040693 -43.9131 2.3580 ## USH00040924 -36.2514 -1.9033 ## USH00041048 -37.2123 -2.5620 ## USH00041614 -41.8278 6.0172 ## USH00041715 -43.4753 4.1747 ## USH00041758 -38.7400 -2.8764 ## USH00041912 -42.6023 3.5747 ## USH00042239 -38.2414 -2.5267 ## USH00042294 -43.4303 3.0186 ## USH00042319 -38.5211 0.9458 ## USH00042728 -42.3248 2.8142 ## USH00042910 -45.8145 5.2933 ## USH00042941 -40.0817 -0.8122 ## USH00043161 -45.4109 3.9928 ## USH00043257 -41.3736 1.2636 ## USH00043747 -41.2898 0.8055 ## USH00043761 -45.0300 6.2878 ## USH00043875 -44.5273 3.1011 ## USH00044232 -39.8578 1.2817 ## USH00044259 -37.8695 -1.8078 ## USH00044713 -42.2934 3.8019 ## USH00044890 -40.6806 0.8653 ## USH00044997 -43.4234 2.1758 ## USH00045032 -42.9420 2.5897 ## USH00045385 -43.2395 3.6294 ## USH00045532 -42.1659 1.7694 ## USH00045983 -43.9623 5.8042 ## USH00046074 -43.9189 2.7614 ## USH00046118 -36.2731 -0.7489 ## USH00046175 -39.5345 -1.9139 ## USH00046399 -40.8817 -1.0686 ## USH00046506 -43.8539 4.2294 ## USH00046508 -45.1859 5.7925 ## USH00046719 -39.7989 -1.3681 ## USH00046730 -42.3398 0.1114 ## USH00046826 -44.2620 2.7414 ## USH00047195 -42.6017 4.4203 ## USH00047304 -43.9528 5.0011 ## USH00047306 -38.8436 -1.4636 ## USH00047851 -42.3181 -0.2108 ## USH00047902 -41.3386 -1.0997 ## USH00047916 -43.6453 1.4742 ## USH00047965 -44.3520 2.9217 ## USH00048702 -42.3173 4.9003 ## USH00048758 -41.7970 3.6514 ## USH00048839 -40.4039 -0.4931 ## USH00049087 -39.4081 -1.8139 ## USH00049122 -44.8645 3.6303 ## USH00049200 -43.6150 2.8792 ## USH00049452 -41.0073 0.0811 ## USH00049490 -44.5873 5.2058 ## USH00049699 -43.9600 4.0067 ## USH00049855 -41.2439 2.2336 ## USH00049866 -44.2950 6.1872 ## USH00050848 -26.9209 4.4755 ## USH00051294 -26.8798 2.9436 ## USH00051528 -26.9325 3.7039 ## USH00051564 -24.0028 3.3072 ## USH00051741 -29.6173 3.7261 ## USH00052184 -27.9789 2.1578 ## USH00052281 -27.6895 4.1097 ## USH00052446 -24.4350 2.9611 ## USH00053005 -26.7856 5.0983 ## USH00053038 -25.4698 4.7436 ## USH00053146 -30.3873 3.6489 ## USH00053662 -28.6217 3.0094 ## USH00053951 -28.7639 2.2553 ## USH00054076 -23.7778 2.5330 ## USH00054770 -24.2848 2.5772 ## USH00054834 -24.8695 2.5472 ## USH00055322 -27.5934 1.6578 ## USH00055722 -29.5334 2.9694 ## USH00057167 -25.3475 2.5228 ## USH00057337 -27.7986 2.5694 ## USH00057936 -28.4775 4.9719 ## USH00058204 -29.5275 2.4328 ## USH00058429 -26.1411 1.6622 ## USH00059243 -23.8731 4.5419 ## USH00062658 4.9791 6.4336 ## USH00063207 6.3064 5.8342 ## USH00067970 4.7983 5.6083 ## USH00068138 6.1175 6.2786 ## USH00072730 2.8291 3.7419 ## USH00073595 2.7697 3.2997 ## USH00075915 2.9208 3.3819 ## USH00076410 2.5944 4.1530 ## USH00079605 2.8044 4.2575 ## USH00080211 -6.6748 -5.7906 ## USH00080228 -3.5281 -8.2983 ## USH00080478 -3.4975 -7.6178 ## USH00080611 -2.3253 -8.8236 ## USH00082220 -7.7481 -4.7920 ## USH00082850 -3.0439 -9.6675 ## USH00082915 -3.1931 -5.7614 ## USH00082944 -3.1178 -4.8575 ## USH00083163 -1.8553 -9.4145 ## USH00083186 -3.5156 -8.9314 ## USH00083207 -2.0081 -8.0542 ## USH00084289 -3.9667 -6.7133 ## USH00084570 -3.4064 -10.9614 ## USH00084731 -4.2484 -5.3311 ## USH00085275 -5.0661 -5.0647 ## USH00086414 -3.7320 -6.4361 ## USH00086997 -8.8411 -5.0383 ## USH00087020 -2.0903 -9.9345 ## USH00087851 -3.9142 -7.1786 ## USH00088758 -6.0075 -5.1233 ## USH00088824 -4.4186 -7.3578 ## USH00088942 -2.4700 -6.8922 ## USH00090140 -5.8031 -3.9825 ## USH00090586 -6.2717 -4.6936 ## USH00091340 -3.1564 -4.3483 ## USH00091500 -5.8578 -4.3261 ## USH00092318 -5.4978 -1.9192 ## USH00092475 -5.6442 -0.9872 ## USH00092966 -4.8600 -3.3161 ## USH00093621 -5.5142 -1.2158 ## USH00093754 -3.6064 -3.5283 ## USH00094170 -5.1223 -2.2322 ## USH00095874 -4.9039 -2.4333 ## USH00095882 -3.6214 -2.6461 ## USH00096335 -6.4720 -2.0620 ## USH00097276 -5.2234 -4.7328 ## USH00097600 -6.8056 -1.2711 ## USH00097847 -2.8642 -3.3864 ## USH00098535 -6.1739 -2.8289 ## USH00098703 -5.1309 -4.0703 ## USH00098740 -4.9861 -0.9378 ## USH00099141 -4.2764 -2.1136 ## USH00099157 -4.3600 -1.7900 ## USH00099186 -3.9670 -4.2650 ## USH00099291 -6.8434 -2.6470 ## USH00100010 -34.4795 7.4372 ## USH00100448 -37.5778 8.0772 ## USH00100470 -32.9281 8.5261 ## USH00100803 -33.0392 6.8189 ## USH00101408 -38.3295 9.0569 ## USH00101956 -38.4559 12.1625 ## USH00102845 -37.9759 10.9858 ## USH00103143 -37.1898 10.5767 ## USH00103631 -36.9773 7.4239 ## USH00103732 -33.3817 7.0708 ## USH00104140 -35.7920 7.0808 ## USH00104295 -36.2281 6.8364 ## USH00104670 -36.1734 7.2161 ## sum_lat_long ## USH00011084 -13.1672 ## USH00012813 -14.5047 ## USH00013160 -12.4701 ## USH00013511 -12.0497 ## USH00013816 -11.5548 ## USH00015749 -10.0261 ## USH00017157 -9.8103 ## USH00017304 -8.5506 ## USH00017366 -11.7759 ## USH00018024 -9.8892 ## USH00018178 -13.5128 ## USH00018323 -11.3353 ## USH00018380 -11.5748 ## USH00018438 -10.9028 ## USH00018469 -8.2167 ## USH00020080 -37.6609 ## USH00021026 -36.3773 ## USH00021248 -30.5567 ## USH00021514 -35.6467 ## USH00021614 -34.5193 ## USH00023160 -33.6453 ## USH00023596 -33.2681 ## USH00024089 -32.4156 ## USH00024645 -35.9873 ## USH00024849 -31.9084 ## USH00025512 -34.6362 ## USH00026250 -37.3056 ## USH00026353 -35.0728 ## USH00026796 -35.0322 ## USH00027281 -34.6483 ## USH00027370 -35.8323 ## USH00027390 -34.0364 ## USH00027435 -32.0562 ## USH00027716 -34.7181 ## USH00028619 -35.5219 ## USH00028815 -35.8950 ## USH00029271 -33.3370 ## USH00029287 -35.9317 ## USH00029359 -34.1203 ## USH00029652 -39.1942 ## USH00030936 -13.5037 ## USH00031596 -14.5153 ## USH00031632 -11.3367 ## USH00032356 -14.5459 ## USH00032444 -15.2444 ## USH00032930 -15.1926 ## USH00034572 -12.2109 ## USH00034756 -16.8469 ## USH00035186 -12.8408 ## USH00035512 -15.5264 ## USH00035754 -14.9639 ## USH00035820 -11.8748 ## USH00035908 -16.7381 ## USH00036253 -14.6309 ## USH00036928 -15.5047 ## USH00040693 -41.5551 ## USH00040924 -38.1547 ## USH00041048 -39.7743 ## USH00041614 -35.8106 ## USH00041715 -39.3006 ## USH00041758 -41.6164 ## USH00041912 -39.0276 ## USH00042239 -40.7681 ## USH00042294 -40.4117 ## USH00042319 -37.5753 ## USH00042728 -39.5106 ## USH00042910 -40.5212 ## USH00042941 -40.8939 ## USH00043161 -41.4181 ## USH00043257 -40.1100 ## USH00043747 -40.4843 ## USH00043761 -38.7422 ## USH00043875 -41.4262 ## USH00044232 -38.5761 ## USH00044259 -39.6773 ## USH00044713 -38.4915 ## USH00044890 -39.8153 ## USH00044997 -41.2476 ## USH00045032 -40.3523 ## USH00045385 -39.6101 ## USH00045532 -40.3965 ## USH00045983 -38.1581 ## USH00046074 -41.1575 ## USH00046118 -37.0220 ## USH00046175 -41.4484 ## USH00046399 -41.9503 ## USH00046506 -39.6245 ## USH00046508 -39.3934 ## USH00046719 -41.1670 ## USH00046730 -42.2284 ## USH00046826 -41.5206 ## USH00047195 -38.1814 ## USH00047304 -38.9517 ## USH00047306 -40.3072 ## USH00047851 -42.5289 ## USH00047902 -42.4383 ## USH00047916 -42.1711 ## USH00047965 -41.4303 ## USH00048702 -37.4170 ## USH00048758 -38.1456 ## USH00048839 -40.8970 ## USH00049087 -41.2220 ## USH00049122 -41.2342 ## USH00049200 -40.7358 ## USH00049452 -40.9262 ## USH00049490 -39.3815 ## USH00049699 -39.9533 ## USH00049855 -39.0103 ## USH00049866 -38.1078 ## USH00050848 -22.4454 ## USH00051294 -23.9362 ## USH00051528 -23.2286 ## USH00051564 -20.6956 ## USH00051741 -25.8912 ## USH00052184 -25.8211 ## USH00052281 -23.5798 ## USH00052446 -21.4739 ## USH00053005 -21.6873 ## USH00053038 -20.7262 ## USH00053146 -26.7384 ## USH00053662 -25.6123 ## USH00053951 -26.5086 ## USH00054076 -21.2448 ## USH00054770 -21.7076 ## USH00054834 -22.3223 ## USH00055322 -25.9356 ## USH00055722 -26.5640 ## USH00057167 -22.8247 ## USH00057337 -25.2292 ## USH00057936 -23.5056 ## USH00058204 -27.0947 ## USH00058429 -24.4789 ## USH00059243 -19.3312 ## USH00062658 11.4127 ## USH00063207 12.1406 ## USH00067970 10.4066 ## USH00068138 12.3961 ## USH00072730 6.5710 ## USH00073595 6.0694 ## USH00075915 6.3027 ## USH00076410 6.7474 ## USH00079605 7.0619 ## USH00080211 -12.4654 ## USH00080228 -11.8264 ## USH00080478 -11.1153 ## USH00080611 -11.1489 ## USH00082220 -12.5401 ## USH00082850 -12.7114 ## USH00082915 -8.9545 ## USH00082944 -7.9753 ## USH00083163 -11.2698 ## USH00083186 -12.4470 ## USH00083207 -10.0623 ## USH00084289 -10.6800 ## USH00084570 -14.3678 ## USH00084731 -9.5795 ## USH00085275 -10.1308 ## USH00086414 -10.1681 ## USH00086997 -13.8794 ## USH00087020 -12.0248 ## USH00087851 -11.0928 ## USH00088758 -11.1308 ## USH00088824 -11.7764 ## USH00088942 -9.3622 ## USH00090140 -9.7856 ## USH00090586 -10.9653 ## USH00091340 -7.5047 ## USH00091500 -10.1839 ## USH00092318 -7.4170 ## USH00092475 -6.6314 ## USH00092966 -8.1761 ## USH00093621 -6.7300 ## USH00093754 -7.1347 ## USH00094170 -7.3545 ## USH00095874 -7.3372 ## USH00095882 -6.2675 ## USH00096335 -8.5340 ## USH00097276 -9.9562 ## USH00097600 -8.0767 ## USH00097847 -6.2506 ## USH00098535 -9.0028 ## USH00098703 -9.2012 ## USH00098740 -5.9239 ## USH00099141 -6.3900 ## USH00099157 -6.1500 ## USH00099186 -8.2320 ## USH00099291 -9.4904 ## USH00100010 -27.0423 ## USH00100448 -29.5006 ## USH00100470 -24.4020 ## USH00100803 -26.2203 ## USH00101408 -29.2726 ## USH00101956 -26.2934 ## USH00102845 -26.9901 ## USH00103143 -26.6131 ## USH00103631 -29.5534 ## USH00103732 -26.3109 ## USH00104140 -28.7112 ## USH00104295 -29.3917 ## USH00104670 -28.9573 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 1018 rows ] #closest &lt;- which(min(station$longitude + station$latitude)) "],["comparing-different-models.html", "Chapter 6 Comparing different models 6.1 Question 0 6.2 Question 1 6.3 Question 2 6.4 Question 3 6.5 Question 4 6.6 Question 5 6.7 Question 6", " Chapter 6 Comparing different models This homework is to meant for you practice some feature engineering with the different regression models. Context: the US is increasingly polarized and Twitter, a social media platform, is providing the space for people to voice their opinions or find like-minded individuals. In this assignment, we will use Twitter data non_retweets_dc_inaug_steal.csv on CourseWorks that has contains the token frequencies. This has been processed somewhat to minimize the data size. The non-token variables are created_at, like_count, reply_count, retweet_count, tweet_body. Please re-download this dataset given there were issues with the version given in class. The tweets are collected overtime with the query words “steal”, “inaguration”, and “washington dc” using Twitter’s Recent Search API. Calls were made once a day around midnight and there is a limit on the number of queries that can be made freely. 6.1 Question 0 What dates do the tweets cover? Please visualize the temporal distribution of the tweets with the intent to understand where most Tweets in the dataset came from in time. 6.2 Question 1 Please combine all the token frequencies that contain the string inaug into a single column. You should remove the redundant tokens after this summarization. Please select the method of “combining” that is consistent with the “token frequency” concept. Please report the fraction of records that have non-zero frequencies for this new column. 6.3 Question 2 We want to discover the topics correlated with the inauguration over time. To achieve this, please model your new column from Question 1 against all other tokens (i.e. exclude the non-token variables) using the following models. This is time-consuming! You should use Sys.time() to have a realistic expectation of how long each model will take. Please plot the MSE from a 5-fold cross validation to compare the prediction accuracy between - OLS - Please ignore the rank deficient warning, this is a warning of high-collinearity that is common with high dimensional data and why OLS shouldn’t do well. - stepwise regression using AIC as the objective # ols = lm(y ~ ., df) # ols_summ = summary(ols)$coefficients # okay_features = rownames(ols_summ)[ols_summ[, 4] &lt; 0.05] # init_formula = paste(&#39;y ~&#39;, paste(okay_features, collapse=&#39;+&#39;)) # init_mod = lm(init_fomrula, df) # # &quot;~.&quot; sets the upper model for the `scope` as using all of the features # step_mod &lt;- step(init_mod, &quot;~.&quot;) Lasso corresponding to \\[\\lambda\\]=lambda.min from cv.glmnet hint: predict.cv.glmnet hint: you may want to convert the training X matrix into sparse matrices, i.e. Matrix(as.matrix(df_sans_y), sparse=TRUE) to speed things up. This essentially avoids many multiplications when a 0 is involved. Ridge regression corresponding to \\[\\lambda\\]=lambda.min from cv.glmnet Please do not normalize your features for this problem but use the raw frequencies. hint, adding some print statements can help with unnecessary panics: # library(caret) # test_folds &lt;- createFolds(DEP_VARIABLE, k=5) # for(i in seq_along(test_folds)){ # # # Some code that isolates the test/train data! # # print(paste(&quot;cross validation fold&quot;, i)) # t0 &lt;- Sys.time() # ols &lt;- lm(TRAIN_DEP_VARIABLE ~ TRAIN_INDEP_VARIABLE) # print(paste(&#39;running OLS took&#39;, Sys.time() - t0)) # } Side comment: - You may want to see how the lambda.1se compares. - (personal observation) Normalizing the features does help with the optimization but our features are all token frequencies so it’s not as big of a concern. 6.4 Question 3 For the algorithm that performed the best, please retrain the model with the following requirements: - Use all of the data, i.e. do not reserve data for test/train. - You may need to normalize the features. If Lasso/Ridge was best, note that sparsity will not hold after you normalize. Please plot the distribution of the coefficients. 6.5 Question 4 Please list out the top tokens corresponding to the strongest non-zero coefficients. Side comment: If you are not an American, what do these tokens and their coefficients suggest about the inauguration? 6.6 Question 5 Please write a function that represents the objective function for Ridge regression, i.e. your function should take in a vector of coefficients, a matrix X, and a vector Y and return a real number. - Please make sure you fit an intercept within the function but do not include the intercept in your regularization term for the objective. - Please add an additional argument called shrink_target that allows us to change the shrinkage of the coefficients to arbitrary vector. - Please make sure you set the default for this argument to align with the usual Ridge regression. 6.7 Question 6 Please perform PCA on the token frequencies without normalizing. - Plot the eigenvalues in order (not the cumulative eigenvalues) of their magnitude, how many components might have interesting features. There are many correct answers but also many wrong answers here depending on your plot. - Analyze the loadings from the first 2 components, do they seem meaningful to you given the dataset? - if yes, what key tokens are associated with these 2 components and why do they carry meaning? - if no, how could you modify the token frequencies to get more meaningful principle components? Side comment (things to think about): - what would you do after identifying the components? - again, if you were not involved in American politics, how would you have done some of these steps? - Twitter data is not like normal language, e.g. people do not use complete sentences. How might this look if we had journal articles? "],["tidyverse-tools.html", "Chapter 7 Tidyverse tools 7.1 Select 7.2 Filter 7.3 Mutate 7.4 Summarise / Summarize 7.5 Arrange() 7.6 Group_by()", " Chapter 7 Tidyverse tools library(tidyverse) 7.1 Select 7.1.1 Original Data Set head(storms) ## # A tibble: 6 x 13 ## name year month day hour lat long ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Amy 1975 6 27 0 27.5 -79 ## 2 Amy 1975 6 27 6 28.5 -79 ## 3 Amy 1975 6 27 12 29.5 -79 ## 4 Amy 1975 6 27 18 30.5 -79 ## 5 Amy 1975 6 28 0 31.5 -78.8 ## 6 Amy 1975 6 28 6 32.4 -78.7 ## # … with 6 more variables: status &lt;chr&gt;, ## # category &lt;ord&gt;, wind &lt;int&gt;, ## # pressure &lt;int&gt;, ts_diameter &lt;dbl&gt;, ## # hu_diameter &lt;dbl&gt; You can use (data source, columns) dplyr::select(storms, name, pressure) ## # A tibble: 10,010 x 2 ## name pressure ## &lt;chr&gt; &lt;int&gt; ## 1 Amy 1013 ## 2 Amy 1013 ## 3 Amy 1013 ## 4 Amy 1013 ## 5 Amy 1012 ## 6 Amy 1012 ## 7 Amy 1011 ## 8 Amy 1006 ## 9 Amy 1004 ## 10 Amy 1002 ## # … with 10,000 more rows We can also do (data source, -columns) to choose all but that column, i.e.: dplyr::select(storms, -name) ## # A tibble: 10,010 x 12 ## year month day hour lat long status ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1975 6 27 0 27.5 -79 tropi… ## 2 1975 6 27 6 28.5 -79 tropi… ## 3 1975 6 27 12 29.5 -79 tropi… ## 4 1975 6 27 18 30.5 -79 tropi… ## 5 1975 6 28 0 31.5 -78.8 tropi… ## 6 1975 6 28 6 32.4 -78.7 tropi… ## 7 1975 6 28 12 33.3 -78 tropi… ## 8 1975 6 28 18 34 -77 tropi… ## 9 1975 6 29 0 34.4 -75.8 tropi… ## 10 1975 6 29 6 34 -74.8 tropi… ## # … with 10,000 more rows, and 5 more ## # variables: category &lt;ord&gt;, wind &lt;int&gt;, ## # pressure &lt;int&gt;, ts_diameter &lt;dbl&gt;, ## # hu_diameter &lt;dbl&gt; 7.1.2 Other select functions: Other useful selection function Function call Description - select everything but : select range contains() Select columns whose name contains a character string ends_with() Select columns whose name ends with a string everything() Select every column matches() Select columns who name matches a regular expression num_range() Select columns named x1,x2,x3… one_of() Select columns whose names are in a group of names starts_with() Select columns whose name starts with a character string 7.2 Filter This will apply a test to every row in the data frame and return just the rows that pass the test. You can combine by putting a comma in the state. It acts as AND. dplyr::filter(storms, wind &gt;= 50, name %in% c(&quot;alberto&quot;, &quot;Alex&quot;, &quot;allison&quot;)) ## # A tibble: 35 x 13 ## name year month day hour lat long ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alex 2004 8 2 12 31.3 -79 ## 2 Alex 2004 8 2 18 31.8 -78.7 ## 3 Alex 2004 8 3 0 32.4 -78.2 ## 4 Alex 2004 8 3 6 33 -77.4 ## 5 Alex 2004 8 3 12 34.2 -76.4 ## 6 Alex 2004 8 3 18 35.3 -75.2 ## 7 Alex 2004 8 4 0 36 -73.7 ## 8 Alex 2004 8 4 6 36.8 -72.1 ## 9 Alex 2004 8 4 12 37.3 -70.2 ## 10 Alex 2004 8 4 18 37.8 -68.3 ## # … with 25 more rows, and 6 more variables: ## # status &lt;chr&gt;, category &lt;ord&gt;, ## # wind &lt;int&gt;, pressure &lt;int&gt;, ## # ts_diameter &lt;dbl&gt;, hu_diameter &lt;dbl&gt; 7.2.1 Logical Tests in R The columns on the right show Boolean operator, these combine 2 or more logical tests into a single one, so you get true or false. The columns on the left actually do logical operations. Logical tests in R Logical Test ?Comparison Boolean Operator ?base::Logic &lt; &amp; boolean and &gt; Greater than | boolean or == Equal to xor exactly or &lt;= Less than or equal ! not &gt;= Greater than or equal any any true %in% Group membership all all true != Not equal is.na is NA !is.na Is not NA 7.3 Mutate The mutate function takes your data frame and it returns a copy of the data with, with additional variables that you derive from the variable set that exists in the data. So mutate is there for anything you can derive from the data you already have, and want to make a new column from it. storms %&gt;% mutate(ratio = pressure / wind) %&gt;% select(name, pressure, wind, ratio) ## # A tibble: 10,010 x 4 ## name pressure wind ratio ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Amy 1013 25 40.5 ## 2 Amy 1013 25 40.5 ## 3 Amy 1013 25 40.5 ## 4 Amy 1013 25 40.5 ## 5 Amy 1012 25 40.5 ## 6 Amy 1012 25 40.5 ## 7 Amy 1011 25 40.4 ## 8 Amy 1006 30 33.5 ## 9 Amy 1004 35 28.7 ## 10 Amy 1002 40 25.0 ## # … with 10,000 more rows You can also make multiple columns at the same time, even using columns that are created at the same time, as long as those come before chronologically, i.e. storms %&gt;% mutate(ratio = pressure / wind, inverse = ratio^-1) %&gt;% select(name, pressure, wind, ratio, inverse) ## # A tibble: 10,010 x 5 ## name pressure wind ratio inverse ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Amy 1013 25 40.5 0.0247 ## 2 Amy 1013 25 40.5 0.0247 ## 3 Amy 1013 25 40.5 0.0247 ## 4 Amy 1013 25 40.5 0.0247 ## 5 Amy 1012 25 40.5 0.0247 ## 6 Amy 1012 25 40.5 0.0247 ## 7 Amy 1011 25 40.4 0.0247 ## 8 Amy 1006 30 33.5 0.0298 ## 9 Amy 1004 35 28.7 0.0349 ## 10 Amy 1002 40 25.0 0.0399 ## # … with 10,000 more rows One thing to note: mutate doesn’t affect the original data frame. It simply returns a new temporary dataframe. If you want to save the columns you need to assign it to a new data frame (or overwrite the original) 7.3.1 Useful mutate functions: Function Description pmin(), pmax() Element wise min and max cummin(), cummax() cumulative min and max cumsum(), cumprod() Cumulative sum and product between() Are values between a and b? cume_dist() Cumulative distribution of values cumall(), cumany() Cumulative all and any cummean() Cumulative mean lead(), lag() Copy with values one position ntile() Bin vector into n buckets dense_rank(), min_rank(), percent_rank(), row_number() Various ranking methods 7.4 Summarise / Summarize Summarize allows us to take a data frame and calculate a summary statistic from it and get back a new data frame that is much smaller. storms %&gt;% summarize(median = median(pressure), variance = var(pressure), n = n()) ## # A tibble: 1 x 3 ## median variance n ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 999 381. 10010 Works very similar to mutate. 7.4.1 Useful summary functions Useful summary functions, top 5 are specific to dplyr Function Description min(), max() Minimum and maximum values mean() Mean value median() Median Value sum() Sum of values var, sd() Variance and standard deviation of a vector first() First value in a vector last() Last value in a vector nth Nth value in a vector n() The number of values in a vector n_distinct() The number of distinct values in a vector 7.5 Arrange() This doesn’t add or subtract from your data, but helps you organize your rows! storms %&gt;% arrange(desc(wind)) %&gt;% select(name, wind, pressure, year) ## # A tibble: 10,010 x 4 ## name wind pressure year ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Gilbert 160 888 1988 ## 2 Wilma 160 882 2005 ## 3 Gilbert 155 889 1988 ## 4 Mitch 155 905 1998 ## 5 Mitch 155 910 1998 ## 6 Rita 155 895 2005 ## 7 Rita 155 897 2005 ## 8 Anita 150 926 1977 ## 9 David 150 924 1979 ## 10 David 150 926 1979 ## # … with 10,000 more rows This way, ties are just ordered in the way they originally appeared in the dataframe. Alternatively, you can give a second column to sort by to break those ties, such as by year: storms %&gt;% arrange(desc(wind), desc(year)) %&gt;% select(name, wind, pressure, year) ## # A tibble: 10,010 x 4 ## name wind pressure year ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Wilma 160 882 2005 ## 2 Gilbert 160 888 1988 ## 3 Rita 155 895 2005 ## 4 Rita 155 897 2005 ## 5 Mitch 155 905 1998 ## 6 Mitch 155 910 1998 ## 7 Gilbert 155 889 1988 ## 8 Dean 150 907 2007 ## 9 Dean 150 905 2007 ## 10 Felix 150 935 2007 ## # … with 10,000 more rows 7.6 Group_by() A very powerful function to get summary statistics from just certain groups. Say we want to see median wind speed based on year for example: storms %&gt;% group_by(year) %&gt;% summarize(median = median(pressure), variance = var(pressure), n = n()) ## # A tibble: 41 x 4 ## year median variance n ## * &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1975 997 231. 86 ## 2 1976 992 233. 52 ## 3 1977 1001 417. 53 ## 4 1978 1007 44.0 54 ## 5 1979 1002 395. 301 ## 6 1980 996 128. 161 ## 7 1981 997 217. 164 ## 8 1982 1001 232. 105 ## 9 1983 1005 138. 79 ## 10 1984 998 178. 236 ## # … with 31 more rows We can save that in a in data frame and graph it too! storms_graph &lt;- storms %&gt;% group_by(year) %&gt;% summarize(median = median(pressure), variance = var(pressure), n = n()) ggplot(data = storms_graph, mapping = aes(x = year, y = median)) + geom_point() + geom_smooth() + labs(title = &quot;Median wind speed of storms by year&quot;) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; You can also group by multiple things, just add a comma! "]]
